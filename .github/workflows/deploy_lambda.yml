name: "deploy lambda"
on:
  issue_comment:

jobs:

  build:
    name: "deploy lambda"
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request != null && github.event.comment.body == '.deplam' }}
    steps:
      - uses: actions/github-script@v3
        id: get-pr
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }
      - uses: actions/checkout@v2
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }} # or .head.ref for branch name

      - uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitHash = `${{ fromJSON(steps.get-pr.outputs.result).head.sha }}`;
            const substrCommitHash = commitHash.substr(0,7);

            const output = `#### start lambda deploying.... ${substrCommitHash}
            CI URL: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}
            `;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: req
        working-directory: lambda_youtube_dl
        run: |
          pip install -r requirements.txt -t .
      - name: zip
        working-directory: lambda_youtube_dl
        run: |
          zip -r upload.zip *
      - name: upload zip
        id: upload
        run: |
          aws lambda update-function-code --function-name python-youtube-dl --zip-file fileb://${GITHUB_WORKSPACE}/lambda_youtube_dl/upload.zip

      - name: Lambda Deploy Status
        if: steps.upload.outcome == 'failure'
        run: exit 1

      - uses: actions/github-script@0.9.0
        env:
          APPLY: ${{ steps.upload.outputs.stdout }}
          APPLY_ERROR: ${{ steps.upload.outputs.stderr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitHash = `${{ fromJSON(steps.get-pr.outputs.result).head.sha }}`;
            const substrCommitHash = commitHash.substr(0,7);
            const output = `#### .deplam „ÅÆÁµêÊûú„ÇíË°®Á§∫„Åô„Çã„ÄÇ ${substrCommitHash}
            #### Deploy Lambda üìñ\`${{ steps.upload.outcome }}\`

            <details><summary>Show Apply Result</summary>

            \`\`\`terraform
            ${process.env.APPLY}
            \`\`\`

            </details>
            
            ${ process.env.APPLY_ERROR &&
              `<details><summary>Error</summary>

              \`\`\`terraform
              ${process.env.APPLY_ERROR}
              \`\`\`

              </details>
            `}`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
